//Create variables for the list of questions and choices
        //PRESENT TENSE
        //const questions_present = JSON.parse({{questions_present|tojson|safe}});
        //const choices_present = JSON.parse({{choices_present|tojson|safe}});
        //console.log(choices_present);
        //PRESENT STEM CHANGING VERBS
        //const questions_present_stem_changing = JSON.parse({{questions_present_stem_changing|tojson|safe}});
        //const choices_present_stem_changing = JSON.parse({{choices_present_stem_changing|tojson|safe}});
        //console.log(choices_present_stem_changing);

        

        /*let number_of_choices = 3;
        let displayedQuestion = 0;
        let total_points = 0;


        //Create variables of different html elements and event listeners
        const instructions = document.querySelector("#instructions")
        const startButton = document.querySelector("#start-button");
        startButton.addEventListener("click", startQuiz);
        const containerQuiz = document.querySelector(".container-quiz");
        const questionContainer = document.querySelector("#question-container");
        const nextButton = document.querySelector("#next-button");
        nextButton.addEventListener("click", () => {
            event.preventDefault();
            setNextQuestion(displayedQuestion);
        });
        const text_before = document.querySelector(".text_before");
        const text_after = document.querySelector(".text_after");
        const blank = document.querySelector('.blank');
        const choices = document.querySelector('.choices');
        const tensesMenu = document.querySelector('.tenses-menu')




        function startQuiz(){
            console.log("Quiz started")
            startButton.classList.add("hide")
            questionContainer.classList.remove("hide")
            tensesMenu.classList.add("hide")
            setNextQuestion(displayedQuestion);
        }
        function setNextQuestion() {
            // Clear previous questions and choices
            text_before.textContent = '';
            text_after.textContent = '';
            choices.innerHTML = '';
            blank.innerHTML = '';
            feedback.innerHTML = '';

            // Reset state
            blank.className = 'blank';
            nextButton.classList.add("hide");
            submit.classList.remove("hide");
            feedback.classList.remove("feedback-wrong");
            feedback.classList.remove("feedback-correct");
        
            if (displayedQuestion < questions_present.length) {
                // Set the question text
                text_before.textContent = questions_present[displayedQuestion].question_text_before;
                text_after.textContent = questions_present[displayedQuestion].question_text_after;
        
                // Select choices for the current question
                let choicesDisplayed = choices_present.filter(function(item) {
                    return item.question_number === displayedQuestion + 1;
                });
        
                // Display choices
                choicesDisplayed.forEach(function(choiceItem) {
                    const span = document.createElement("span");
                    span.className = "choice";
                    span.id = choiceItem.choice;
                    span.textContent = choiceItem.choice;
                    span.draggable = true;
                    span.is_correct = choiceItem.is_correct;
                    choices.appendChild(span);
                });
        
                // Increment the displayedQuestion
                displayedQuestion++;
            } else {
                // Handle end of questions
                text_before.textContent = "Quiz completed!";
                text_after.textContent = "";
                submit.classList.add("hide");
                instructions.classList.add("hide");
                blank.classList.add("hide")
            }
            

        }
        
        //dragged will be the element that is dragged from the choices list
        //when the dragg starts we can set the data from the element so we can get it when the user drops it.
        let dragged = null;
        choices.addEventListener('dragstart', e => {
            e.dataTransfer.setData('is_correct', e.target.is_correct);
            dragged = e.target;
            console.log(dragged);
        });

        //Add effects for the blank zone when the user drags the element over it
        blank.addEventListener('dragover', e => {
            e.preventDefault();
            if (blank.firstChild) {
                    e.dataTransfer.dropEffect = 'none';
            } 
            else {
                    e.target.classList.add('hover');
                }  
        });

        //Remove effects when leaves the blank zone
        blank.addEventListener('dragleave', e => {
            e.target.classList.remove('hover');
        });

        //The blank zone removes the hover effect, gets the data from the item and allow drop
        blank.addEventListener('drop', e => {
            e.target.classList.remove('hover');
            const is_correct = e.dataTransfer.getData('is_correct');
            if (e.target.className === 'blank' && !blank.firstChild){
                e.target.appendChild(dragged);
                blank.classList.add("dropped"); 
                blank.firstChild.classList.add("dropped");
                const allChoices = document.querySelectorAll('.choice');
                allChoices.forEach(choice => {
                        choice.draggable = false;
                });
            dragged.draggable = true;
            }
        });

        //reverse process if the user wants to change the answer before submitting
        blank.addEventListener('dragstart', e => {
            e.dataTransfer.setData('is_correct', e.target.is_correct);
            dragged = event.target;
        });

        choices.addEventListener('dragover', e => {
            e.preventDefault();
            e.target.classList.add('hover');
            
        });

        choices.addEventListener('dragleave', e => {
            e.target.classList.remove('hover');
        });

        choices.addEventListener('drop', e => {
            e.target.classList.remove('hover');
            const is_correct = e.dataTransfer.getData('is_correct');
            if (e.target.className === 'choices'){
                e.target.appendChild(dragged);
                blank.classList.remove("dropped"); 
                dragged.classList.remove("dropped");
                const allChoices = document.querySelectorAll('.choice');
                allChoices.forEach(choice => {
                    choice.draggable = true;
                });
            };
        });

        //create constants and variables to validate answers and update points
        const points = document.querySelector('#points')
        const feedback = document.querySelector('#feedback');
        const submit = document.querySelector('#submit');

        //When the button submit is clicked prevent the page from refreshing
        //Validate answer by checking the is_correct value
        //Provide feedback and update the points
        submit.addEventListener("click", e => {
            e.preventDefault();
            console.log(dragged.is_correct);
            if(dragged.is_correct === 1){
                feedback.classList.add("feedback-correct");
                feedback.textContent = '¡Muy bien!';
                const allChoices = document.querySelectorAll('.choice');
                allChoices.forEach(choice => {
                        if(choice == dragged){
                            choice.classList.add("dragged-correct");
                        }
            });
                total_points++;
                points.textContent = total_points + "/10 points";

            }
            else{
                feedback.classList.add("feedback-wrong");
                feedback.textContent = '¡Uy, casi!';
                const allChoices = document.querySelectorAll('.choice');
                allChoices.forEach(choice => {
                        if(choice == dragged){
                            choice.classList.add("dragged-wrong");
                        }
                });          
            }

            dragged.draggable = false;
            nextButton.classList.remove("hide");
            submit.classList.add("hide")
        });*/       












--------------------------------


blank.addEventListener('drop', e => {
                            e.target.classList.remove('hover');
                            const is_correct = e.dataTransfer.getData('is_correct');
                            if (e.target.className === 'blank' && !blank.firstChild){
                                e.target.appendChild(dragged);
                                blank.classList.add("dropped"); 
                                blank.firstChild.classList.add("dropped");
                                const allChoices = document.querySelectorAll('.choice');
                                allChoices.forEach(choice => {
                                        choice.draggable = false;
                                });
                            dragged.draggable = true;
                            }
                        });



----------------
//dragged will be the element that is dragged from the choices list
                        //when the dragg starts we can set the data from the element so we can get it when the user drops it.
                        let dragged = null;
                        choices.addEventListener('dragstart', e => {
                            e.dataTransfer.setData('is_correct', e.target.is_correct);
                            dragged = e.target;
                            console.log(dragged);
                        });

                        //Add effects for the blank zone when the user drags the element over it
                        blank.addEventListener('dragover', e => {
                            e.preventDefault();
                            if (blank.firstChild) {
                                    e.dataTransfer.dropEffect = 'none';
                            } 
                            else {
                                    e.target.classList.add('hover');
                                }  
                        });

                        //Remove effects when leaves the blank zone
                        blank.addEventListener('dragleave', e => {
                            e.target.classList.remove('hover');
                        });

                        //The blank zone removes the hover effect, gets the data from the item and allow drop
                        blank.addEventListener('drop', e => {
                            e.target.classList.remove('hover');
                            const is_correct = e.dataTransfer.getData('is_correct');
                            if (e.target.className === 'blank' && !blank.firstChild){
                                e.target.appendChild(dragged);
                                blank.classList.add("dropped"); 
                                blank.firstChild.classList.add("dropped");
                                const allChoices = document.querySelectorAll('.choice');
                                allChoices.forEach(choice => {
                                        choice.draggable = false;
                                });
                            dragged.draggable = true;
                            }
                        });

                        //reverse process if the user wants to change the answer before submitting
                        blank.addEventListener('dragstart', e => {
                            e.dataTransfer.setData('is_correct', e.target.is_correct);
                            dragged = event.target;
                        });

                        choices.addEventListener('dragover', e => {
                            e.preventDefault();
                            e.target.classList.add('hover');
                            
                        });

                        choices.addEventListener('dragleave', e => {
                            e.target.classList.remove('hover');
                        });

                        choices.addEventListener('drop', e => {
                            e.target.classList.remove('hover');
                            const is_correct = e.dataTransfer.getData('is_correct');
                            if (e.target.className === 'choices'){
                                e.target.appendChild(dragged);
                                blank.classList.remove("dropped"); 
                                dragged.classList.remove("dropped");
                                const allChoices = document.querySelectorAll('.choice');
                                allChoices.forEach(choice => {
                                    choice.draggable = true;
                                });
                            };
                        });

                        //create constants and variables to validate answers and update points
                        const points = document.querySelector('#points')
                        const feedback = document.querySelector('#feedback');
                        const submit = document.querySelector('#submit');

                        //When the button submit is clicked prevent the page from refreshing
                        //Validate answer by checking the is_correct value
                        //Provide feedback and update the points
                        submit.addEventListener("click", e => {
                            e.preventDefault();
                            console.log(dragged.is_correct);
                            if(dragged.is_correct === 1){
                                feedback.classList.add("feedback-correct");
                                feedback.textContent = '¡Muy bien!';
                                const allChoices = document.querySelectorAll('.choice');
                                allChoices.forEach(choice => {
                                        if(choice == dragged){
                                            choice.classList.add("dragged-correct");
                                        }
                            });
                                total_points++;
                                points.textContent = total_points + "/10 points";

                            }
                            else{
                                feedback.classList.add("feedback-wrong");
                                feedback.textContent = '¡Uy, casi!';
                                const allChoices = document.querySelectorAll('.choice');
                                allChoices.forEach(choice => {
                                        if(choice == dragged){
                                            choice.classList.add("dragged-wrong");
                                        }
                                });          
                            }

                            dragged.draggable = false;
                            nextButton.classList.remove("hide");
                            submit.classList.add("hide")
                        });



--------------------------------------------------------------

{% extends "layout.html" %}

{% block title %}
    Dragandrop
{% endblock %}

{% block main %}

<div class="container-quiz" >
        </form>
            <div class="tenses-menu">
                <label  for="tenses">Choose a tense:</label>
                    <select name="tenses" id="tenses">
                    <option value="default" disabled selected>Tenses</option>
                    <option value="present">Present</option>
                    <option value="present_stem_changing">Present Stem-Changing</option>
                    </select>
                    <div>
                        <button class="btn btn-primary" id="confirm-selection-button">Confirm Selection</button>  
                        <button class="btn btn-primary hide" id="start-button">Start</button>                 
                    </div>

            </div>
        </form>

        <form>
        <div id="question-container" class="hide" >
            <span id="points">0/10 points</span>
            <h6 id="instructions">Drag and drop the correct verb to complete the sentence:</h6> 
            <p><span class="text_before"> </span> <span class="blank"></span><span class="text_after"> </span> </p>
            <p id="feedback"></p>
            <div id="choices" class="choices"></div>
            <button type="submit" id="submit" class="submit btn btn-primary">Submit</button>
            <button type="button" class="next-button btn btn-primary hide" id="next-button">Next</button>
        </div>
        </form>   
    </div>

    <script defer>
        const startButton = document.querySelector("#start-button");
        const confirmSelection = document.querySelector("#confirm-selection-button");
        confirmSelection.addEventListener('click', (event) =>{
            event.preventDefault();
            let selectBox = document.querySelector("#tenses");
            let tense = selectBox.value;
            console.log(tense);
            if (tense != "default") {
                confirmSelection.classList.add("hide");
                startButton.classList.remove("hide");
            }


            // Get the questions and answers from the database using API fetch()
            const apiUrl = "/tenses/" + `${tense}`;
            console.log(apiUrl)
            async function fetchTenses() {
                try {
                    let response = await fetch(apiUrl);
                    if (response.ok) {
                        let data = await response.json();
                        console.log(data);

                        //create variables 
                        let questionsSelected = data.questions
                        let choicesSelected = data.choices
                        let number_of_choices = 3;
                        let displayedQuestion = 0;
                        let total_points = 0;

                        //define behavior of startButton                        
                        startButton.addEventListener("click", (event) =>{
                            event.preventDefault();
                            startQuiz()
                        });
                        
                        //Create variables of different html elements and event listeners and set behavior
                        const instructions = document.querySelector("#instructions")
                       
                        const containerQuiz = document.querySelector(".container-quiz");
                        const questionContainer = document.querySelector("#question-container");
                        const nextButton = document.querySelector("#next-button");
                        nextButton.addEventListener("click", () => {
                            event.preventDefault();
                            setNextQuestion(displayedQuestion);
                        });
                        const text_before = document.querySelector(".text_before");
                        const text_after = document.querySelector(".text_after");
                        const blank = document.querySelector('.blank');
                        const choices = document.querySelector('.choices');
                        const tensesMenu = document.querySelector('.tenses-menu')




                        function startQuiz(){
                            console.log("Quiz started")
                            startButton.classList.add("hide")
                            questionContainer.classList.remove("hide")
                            tensesMenu.classList.add("hide")
                            setNextQuestion(displayedQuestion);
                        }
                        function setNextQuestion() {
                            // Clear previous questions and choices
                            text_before.textContent = '';
                            text_after.textContent = '';
                            choices.innerHTML = '';
                            blank.innerHTML = '';
                            feedback.innerHTML = '';

                            // Reset state
                            blank.className = 'blank';
                            nextButton.classList.add("hide");
                            submit.classList.remove("hide");
                            feedback.classList.remove("feedback-wrong");
                            feedback.classList.remove("feedback-correct");
                        
                            if (displayedQuestion < questionsSelected.length) {
                                // Set the question text
                                text_before.textContent = questionsSelected[displayedQuestion].question_text_before;
                                text_after.textContent = questionsSelected[displayedQuestion].question_text_after;
                        
                                // Select choices for the current question
                                let choicesDisplayed = choicesSelected.filter(function(item) {
                                    return item.question_number === displayedQuestion + 1;
                                });
                        
                                // Display choices
                                choicesDisplayed.forEach(function(choiceItem) {
                                    const span = document.createElement("span");
                                    span.className = "choice";
                                    span.id = choiceItem.choice;
                                    span.textContent = choiceItem.choice;
                                    span.draggable = true;
                                    span.is_correct = choiceItem.is_correct;
                                    choices.appendChild(span);
                                });
                        
                                // Increment the displayedQuestion
                                displayedQuestion++;
                            } 
                            
                            else {
                                // Handle end of questions
                                text_before.textContent = "Quiz completed!";
                                text_after.textContent = "";
                                submit.classList.add("hide");
                                instructions.classList.add("hide");
                                blank.classList.add("hide")
                            }
                            

                        }
                        
                        //dragged will be the element that is dragged from the choices list
                        //when the dragg starts we can set the data from the element so we can get it when the user drops it.
                        let dragged = null;
                        choices.addEventListener('dragstart', e => {
                            e.dataTransfer.setData('is_correct', e.target.is_correct);
                            dragged = e.target;
                            console.log(dragged);
                        });

                        //Add effects for the blank zone when the user drags the element over it
                        blank.addEventListener('dragover', e => {
                            e.preventDefault();
                            if (blank.firstChild) {
                                    e.dataTransfer.dropEffect = 'none';
                            } 
                            else {
                                    e.target.classList.add('hover');
                                }  
                        });

                        //Remove effects when leaves the blank zone
                        blank.addEventListener('dragleave', e => {
                            e.target.classList.remove('hover');
                        });

                        //Remove the hover effect from blank. Blank gets the data from the item and allow drop
                        blank.addEventListener('drop', e => {
                            e.target.classList.remove('hover');
                            const is_correct = e.dataTransfer.getData('is_correct');
                            if (e.target.className === 'blank' && !blank.firstChild){
                                e.target.appendChild(dragged);
                                blank.classList.add("dropped"); 
                                blank.firstChild.classList.add("dropped");
                                const allChoices = document.querySelectorAll('.choice');
                                allChoices.forEach(choice => {
                                        choice.draggable = false;
                                });
                            dragged.draggable = true;
                            }
                        });

                        //reverse process if the user wants to change the answer before submitting
                        blank.addEventListener('dragstart', e => {
                            e.dataTransfer.setData('is_correct', e.target.is_correct);
                            dragged = event.target;
                        });

                        choices.addEventListener('dragover', e => {
                            e.preventDefault();
                            e.target.classList.add('hover');
                            
                        });

                        choices.addEventListener('dragleave', e => {
                            e.target.classList.remove('hover');
                        });

                        choices.addEventListener('drop', e => {
                            e.target.classList.remove('hover');
                            const is_correct = e.dataTransfer.getData('is_correct');
                            if (e.target.className === 'choices'){
                                e.target.appendChild(dragged);
                                blank.classList.remove("dropped"); 
                                dragged.classList.remove("dropped");
                                const allChoices = document.querySelectorAll('.choice');
                                allChoices.forEach(choice => {
                                    choice.draggable = true;
                                });
                            };
                        });

                        //create constants and variables to validate answers and update points
                        const points = document.querySelector('#points')
                        const feedback = document.querySelector('#feedback');
                        const submit = document.querySelector('#submit');

                        //When the button submit is clicked prevent the page from refreshing
                        //Validate answer by checking the is_correct value
                        //Provide feedback and update the points
                        submit.addEventListener("click", e => {
                            e.preventDefault();
                            console.log(dragged.is_correct);
                            if(dragged.is_correct === 1){
                                feedback.classList.add("feedback-correct");
                                feedback.textContent = '¡Muy bien!';
                                const allChoices = document.querySelectorAll('.choice');
                                allChoices.forEach(choice => {
                                        if(choice == dragged){
                                            choice.classList.add("dragged-correct");
                                        }
                            });
                                total_points++;
                                points.textContent = total_points + "/10 points";

                            }
                            else{
                                feedback.classList.add("feedback-wrong");
                                feedback.textContent = '¡Uy, casi!';
                                const allChoices = document.querySelectorAll('.choice');
                                allChoices.forEach(choice => {
                                        if(choice == dragged){
                                            choice.classList.add("dragged-wrong");
                                        }
                                });          
                            }

                            dragged.draggable = false;
                            nextButton.classList.remove("hide");
                            submit.classList.add("hide")
                        });
                     } 
                    
                    else {
                        console.error("Failed to fetch data:", response.status, response.statusText);
                    }
                } 
                
                catch (error) {
                    console.error("Error while fetching data:", error);
                }
            }

            // Call the function to fetch data
            fetchTenses();
        })
   </script>
{% endblock %}
   